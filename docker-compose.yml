version: "3.8"

networks:
  database-network:
    name: database-network

  redis-network:
    name: redis-network

  proxy-network:
    name: proxy-network

  elastic:
    name: elastic

volumes:
  database_device:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $HOME/docker-data/transcendence/database

  backend_device:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $HOME/docker-data/transcendence/backend

  redis_device:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: $HOME/docker-data/transcendence/redis

  nginx_logs:
    driver: local
  redis_logs:
    driver: local
  postgres_logs:
    driver: local
 
  #ELK volumes
  certs:
    driver: local
  esdata01:
    driver: local
  kibanadata:
    driver: local
  metricbeatdata01:
    driver: local
  filebeatdata01:
    driver: local
  logstashdata01:
    driver: local

services:
  database:
    image: database
    build:
      context: ./database/
    labels:
      co.elastic.logs/module: postgresql
    container_name: transc-db
    hostname: ${POSTGRES_DB}
    networks:
      - database-network
    #ports:
    # - "5432:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_URL: ${POSTGRES_URL}
    volumes:
      - database_device:/var/lib/postgresql/data
      - postgres_logs:/mnt/postgres
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U '${POSTGRES_USER}' -d '${POSTGRES_DB}'"]
    restart: always

  backend:
    container_name: backend
    image: backend
    build:
      context: ./backend/
    #ports:
    #  - "8000:8000"
    environment:
      DJANGO_SECRET_KEY: ${DJANGO_SECRET_KEY}
      DJANGO_DEBUG: ${DJANGO_DEBUG}
      DJANGO_MEDIA_URL: ${DJANGO_MEDIA_URL}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_URL: ${POSTGRES_URL}
      REDIS_HOST: ${REDIS_HOST}
      DEFAULT_AVATAR_NAME: ${DEFAULT_AVATAR_NAME}

    volumes:
      - backend_device:/data/
      # DEBUG: for development to allow editing the code outside the container
      - ./backend/transc:/app/transc
    depends_on:
      database:
        condition: service_healthy
    networks:
      - database-network
      - redis-network
      - proxy-network
    restart: unless-stopped

  redis:
    image: redis
    build:
      context: ./redis/
    labels:
      co.elastic.logs/module: redis
    container_name: ${REDIS_HOST}
    networks:
      - redis-network
    volumes:
      - redis_device:/var/lib/redis
      - redis_logs:/mnt/redis
    restart: unless-stopped

  frontend:
    container_name: frontend
    image: frontend
    build:
      context: ./frontend
      dockerfile: "Dockerfile.${FRONTEND_ENV:-dev}"
    depends_on:
      - backend
    volumes:
      - ./frontend/src/:/app/src/:ro
      - ./frontend/public/:/app/public/:ro
      - ./frontend/index.html:/app/index.html:ro
    networks:
      - proxy-network
    restart: unless-stopped

  proxy:
    container_name: proxy
    labels:
      co.elastic.logs/module: nginx
    image: proxy
    build:
      context: ./proxy
    depends_on:
      - backend
      - frontend
    ports:
      - "443:443"
    networks:
      - proxy-network
    volumes:
      - ./.ssl/ssl-cert-snakeoil.pem:/etc/ssl/certs/ssl-cert-snakeoil.pem:ro
      - ./.ssl/ssl-cert-snakeoil.key:/etc/ssl/private/ssl-cert-snakeoil.key:ro
      - nginx_logs:/mnt/nginx
    restart: unless-stopped

  #ELK stack services
  setup:
    image: setup
    build:
      context: ./elastic-stack/setup/
      args:
        STACK_VERSION: ${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    environment:
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
    user: "0"
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - elastic

  es01:
    depends_on:
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
    ports:
     - ${ES_PORT}:9200
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
    mem_limit: ${ES_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    restart: unless-stopped
    networks:
      - elastic

  kibana:
    depends_on:
      es01:
        condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    labels:
      co.elastic.logs/module: kibana
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVER_NAME=kibana
      - SERVER_SSL_ENABLED=true
      - SERVER_SSL_CERTIFICATE=config/certs/kibana/kibana.crt
      - SERVER_SSL_KEY=config/certs/kibana/kibana.key
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
      - XPACK_SECURITY_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_ENCRYPTEDSAVEDOBJECTS_ENCRYPTIONKEY=${ENCRYPTION_KEY}
      - XPACK_REPORTING_ENCRYPTIONKEY=${ENCRYPTION_KEY}
    mem_limit: ${KB_MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl --cacert config/certs/ca/ca.crt https://localhost:5601 -I -s | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    restart: unless-stopped
    networks:
      - elastic

  metricbeat01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/metricbeat:${STACK_VERSION}
    user: root
    volumes:
      - certs:/usr/share/metricbeat/certs
      - metricbeatdata01:/usr/share/metricbeat/data
      - "./elastic-stack/metricbeat.yml:/usr/share/metricbeat/metricbeat.yml:ro"
      - "/sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro"
      - "/proc:/hostfs/proc:ro"
      - "/:/hostfs:ro"
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=https://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
    restart: unless-stopped
    networks:
      - elastic

  filebeat01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/beats/filebeat:${STACK_VERSION}
    user: root
    volumes:
      - certs:/usr/share/filebeat/certs
      - filebeatdata01:/usr/share/filebeat/data
      - "./elastic-stack/filebeat_ingest_data/:/usr/share/filebeat/ingest_data/"
      - "./elastic-stack/filebeat.yml:/usr/share/filebeat/filebeat.yml:ro"
      - nginx_logs:/mnt/nginx
      - redis_logs:/mnt/redis
      - postgres_logs:/mnt/postgres
    environment:
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
      - KIBANA_HOSTS=https://kibana:5601
      - LOGSTASH_HOSTS=http://logstash01:9600
    restart: unless-stopped
    networks:
      - elastic

  logstash01:
    depends_on:
      es01:
        condition: service_healthy
      kibana:
        condition: service_healthy
    image: docker.elastic.co/logstash/logstash:${STACK_VERSION}
    labels:
      co.elastic.logs/module: logstash
    user: root
    volumes:
      - certs:/usr/share/logstash/certs
      - logstashdata01:/usr/share/logstash/data
      - "./elastic-stack/logstash_ingest_data/:/usr/share/logstash/ingest_data/"
      - "./elastic-stack/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro"
    environment:
      - xpack.monitoring.enabled=false
      - ELASTIC_USER=elastic
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - ELASTIC_HOSTS=https://es01:9200
    restart: unless-stopped
    networks:
      - elastic
