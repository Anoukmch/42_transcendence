Navigate to Frontend: Use the cd command to navigate into your frontend directory:

cd frontend

Initialize NPM for Frontend: Run npm init and follow the prompts to set up your package.json file.
If you prefer to skip the questions and generate a default package.json, you can use:

npm init -y

navigate to your backend directory:

cd ../backend

Initialize NPM for Backend: Again,
run npm init and follow the prompts (or use npm init -y for default setup).

Additional Information for npm init:
When you run npm init, you will be prompted with a few questions:

name: The name of your project.
version: The version of your project.
description: A brief description of your project.
main: The entry point file of your project (for example, index.js).
scripts: Command shortcuts to manage your project.
author: Your name or the name of the projectâ€™s author.
license: The licensing for the project.
... and possibly a few more.
You can manually edit these later in the generated package.json file as per your project needs.

Result:
After following these steps,
you should have a package.json file in both your /frontend and /backend directories.
These will manage each part's dependencies and scripts independently.

Example Structure:
Your directory structure should resemble the following,
with a package.json in each of the frontend and backend directories:

/project-root
  /frontend
    package.json
  /backend
    package.json

Next Steps:
Start installing the dependencies needed for each part of the project using npm install [package-name].
If you are utilizing version control (like Git),
consider adding node_modules/ to your .gitignore file in both frontend and backend directories to avoid committing dependencies to your repository.
From here, you can begin setting up your frontend and backend projects respectively,
installing needed dependencies, and beginning development!